{"Assignment":"Assignment 2","output":"\/------------------------------------------------------------------------------\\\n|                              Summary of Results                              |\n\\------------------------------------------------------------------------------\/\nTestDesign: 3\/4\n    + 1. test no prints on import\n    - 2. test all specified classes defined\n    + 3. test all specified classes are defined correctly\n    + 4. test all classes and functions have documentation strings\nTestCard: 2\/2\n    + 1. test Card.__str__\n    + 2. test Card.__repr__\nTestNumberCard: 3\/3\n    + 1. test NumberCard.get_number\n    + 2. test NumberCard.__str__\n    + 3. test NumberCard.__repr__\nTestCoderCard: 3\/3\n    + 1. test CoderCard.get_name\n    + 2. test CoderCard.__str__\n    + 3. test CoderCard.__repr__\nTestTutorCard: 3\/3\n    + 1. test TutorCard.get_name\n    + 2. test TutorCard.__str__\n    + 3. test TutorCard.__repr__\nTestKeyboardKidnapperCard: 2\/2\n    + 1. test KeyboardKidnapperCard.__str__\n    + 2. test KeyboardKidnapperCard.__repr__\nTestAllNighterCard: 2\/2\n    + 1. test AllNighterCard.__str__\n    + 2. test AllNighterCard.__repr__\nTestDeck: 9\/14\n    + 1. test Deck.__init__\n    + 2. test Deck.get_cards\n    + 3. test Deck.get_card\n    + 4. test Deck.top\n    + 5. test Deck.remove_card\n    + 6. test Deck.get_amount\n    + 7. test Deck.shuffle\n    - 8. test Deck.pick\n    + 9. test Deck.add_card\n    + 10. test Deck.add_cards\n    - 11. test Deck.copy\n    - 12. test Deck.__str__\n    - 13. test Deck.__repr__\n    - 14. test Deck with other cards\nTestPlayer: 5\/8\n    + 1. test Player.get_name\n    + 2. test Player.get_hand\n    + 3. test Player.get_coders\n    - 4. test Player.has_won\n    + 5. test Player.__str__\n    + 6. test Player.__repr__\n    - 7. test Player with cards in deck\n    - 8. test Player.__repr__ with cards in deck\nTestPlayAndAction: 0\/12\n    - 1. test Card.play\n    - 2. test Card.action\n    - 3. test NumberCard.play\n    - 4. test NumberCard.action\n    - 5. test CoderCard.play\n    - 6. test CoderCard.action\n    - 7. test TutorCard.play\n    - 8. test TutorCard.action\n    - 9. test KeyboardKidnapperCard.play\n    - 10. test KeyboardKidnapperCard.action\n    - 11. test AllNighterCard.play\n    - 12. test AllNighterCard.action\nTestNoPrint: 1\/1\n    + check for no unexpected prints\n--------------------------------------------------------------------------------\n\/------------------------------------------------------------------------------\\\n|                             Failed\/Skipped Tests                             |\n\\------------------------------------------------------------------------------\/\n================================================================================\nFAIL: TestDesign 2. test all specified classes defined\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 181, in test_classes_defined\n        self.aggregate_tests()\n    AssertionError: \n        2 != 3 : 'play' does not have the correct number of parameters, expected 3 found 2 :: CoderCard.play\n        2 != 4 : 'action' does not have the correct number of parameters, expected 4 found 2 :: CoderCard.action\n        2 != 3 : 'play' does not have the correct number of parameters, expected 3 found 2 :: TutorCard.play\n        2 != 4 : 'action' does not have the correct number of parameters, expected 4 found 2 :: TutorCard.action\n        2 != 3 : 'play' does not have the correct number of parameters, expected 3 found 2 :: KeyboardKidnapperCard.play\n        2 != 4 : 'action' does not have the correct number of parameters, expected 4 found 2 :: KeyboardKidnapperCard.action\n        2 != 3 : 'play' does not have the correct number of parameters, expected 3 found 2 :: AllNighterCard.play\n        2 != 4 : 'action' does not have the correct number of parameters, expected 4 found 2 :: AllNighterCard.action\n        <class 'inspect._empty'> != 1 : `amount` should default to `1` :: Deck.pick.amount=1\n\n================================================================================\nFAIL: TestDeck 8. test Deck.pick\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 486, in test_pick\n        self.assertEqual(deck.pick(1), [self._cards[4]])\n    AssertionError: 1 != [Card()]\n\n================================================================================\nFAIL: TestDeck 11. test Deck.copy\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 535, in test_copy\n        self.assertEqual(deck_1.get_cards(), self._cards)\n    AssertionError: Lists differ: [] != [Card(), Card(), Card(), Card(), Card()]\n\n    Second list contains 5 additional elements.\n    First extra element 0:\n    Card()\n\n    - []\n    + [Card(), Card(), Card(), Card(), Card()]\n\n================================================================================\nFAIL: TestDeck 12. test Deck.__str__\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 553, in test_str\n        self.assertEqual(str(deck), \"Deck(Card(), Card(), Card(), Card(), Card())\")\n    AssertionError: 'Deck(Card()Card()Card()Card()Card())' != 'Deck(Card(), Card(), Card(), Card(), Card())'\n    - Deck(Card()Card()Card()Card()Card())\n    + Deck(Card(), Card(), Card(), Card(), Card())\n    ?            ++      ++      ++      ++\n\n================================================================================\nFAIL: TestDeck 13. test Deck.__repr__\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 564, in test_repr\n        self.assertEqual(repr(deck), \"Deck(Card(), Card(), Card(), Card(), Card())\")\n    AssertionError: 'Deck(Card()Card()Card()Card()Card())' != 'Deck(Card(), Card(), Card(), Card(), Card())'\n    - Deck(Card()Card()Card()Card()Card())\n    + Deck(Card(), Card(), Card(), Card(), Card())\n    ?            ++      ++      ++      ++\n\n================================================================================\nFAIL: TestDeck 14. test Deck with other cards\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 577, in test_str_with_other_cards\n        self.assertEqual(str(deck), 'Deck(Card(), NumberCard(1), CoderCard(steven), '\n    AssertionError: 'Deck(Card()NumberCard(1)CoderCard(steven)TutorCard(s[42 chars]d())' != 'Deck(Card(), NumberCard(1), CoderCard(steven), Tutor[52 chars]d())'\n    - Deck(Card()NumberCard(1)CoderCard(steven)TutorCard(steven)KeyboardKidnapperCard()AllNighterCard())\n    + Deck(Card(), NumberCard(1), CoderCard(steven), TutorCard(steven), KeyboardKidnapperCard(), AllNighterCard())\n    ?            ++             ++                 ++                 ++                       ++\n\n================================================================================\nERROR: TestPlayer 4. test Player.has_won\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 623, in test_has_won\n        self.assertIs(p.has_won(), False)\n      File \"a2.py\", line 259, in has_won\n        amount = get_amount()\n    NameError: name 'get_amount' is not defined\n\n================================================================================\nFAIL: TestPlayer 7. test Player with cards in deck\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 649, in test_str_cards\n        self.assertEqual(str(p), 'Player(Steven, Deck(Card(), Card()), Deck())')\n    AssertionError: 'Player(Steven, Deck(Card()Card()), Deck(Card()Card()))' != 'Player(Steven, Deck(Card(), Card()), Deck())'\n    - Player(Steven, Deck(Card()Card()), Deck(Card()Card()))\n    ?                                         ------------\n    + Player(Steven, Deck(Card(), Card()), Deck())\n    ?                           ++\n\n================================================================================\nFAIL: TestPlayer 8. test Player.__repr__ with cards in deck\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 661, in test_repr_cards\n        self.assertEqual(repr(p), 'Player(Steven, Deck(Card(), Card()), Deck())')\n    AssertionError: 'Player(Steven, Deck(Card()Card()), Deck(Card()Card()))' != 'Player(Steven, Deck(Card(), Card()), Deck())'\n    - Player(Steven, Deck(Card()Card()), Deck(Card()Card()))\n    ?                                         ------------\n    + Player(Steven, Deck(Card(), Card()), Deck())\n    ?                           ++\n\n================================================================================\nERROR: TestPlayAndAction 1. test Card.play\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 776, in test_card_play\n        self.init_game(self.a2.Card, cycle=False)\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 2. test Card.action\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 784, in test_card_action\n        self.init_game(self.a2.Card, cycle=False)\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 3. test NumberCard.play\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 797, in test_number_play\n        self.init_game(self.a2.NumberCard, *range(10))\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 4. test NumberCard.action\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 831, in test_number_action\n        self.init_game(self.a2.Card, cycle=False)\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 5. test CoderCard.play\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 844, in test_coder_play\n        self.init_game(self.a2.CoderCard, *(f'Coder {i}' for i in range(10)))\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 6. test CoderCard.action\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 859, in test_coder_action\n        self.init_game(self.a2.Card, cycle=False)\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 7. test TutorCard.play\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 872, in test_tutor_play\n        self.init_game(self.a2.TutorCard, *(f'Tutor {i}' for i in range(10)))\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 8. test TutorCard.action\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 880, in test_tutor_action\n        self.init_game(self.a2.Card, cycle=False)\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 9. test KeyboardKidnapperCard.play\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 911, in test_keyboard_play\n        self.init_game(self.a2.KeyboardKidnapperCard, cycle=False)\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 10. test KeyboardKidnapperCard.action\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 922, in test_keyboard_action\n        coder, state, new_state = self._test_action_card_common(card, slot)\n      File \"test_a2.py\", line 745, in _test_action_card_common\n        self.init_game(self.a2.Card, cycle=False)\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 11. test AllNighterCard.play\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 934, in test_all_nighter_play\n        self.init_game(self.a2.AllNighterCard, cycle=False)\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n================================================================================\nERROR: TestPlayAndAction 12. test AllNighterCard.action\n--------------------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"test_a2.py\", line 945, in test_all_nighter_action\n        coder, state, new_state = self._test_action_card_common(card, slot)\n      File \"test_a2.py\", line 745, in _test_action_card_common\n        self.init_game(self.a2.Card, cycle=False)\n      File \"test_a2.py\", line 686, in init_game\n        player.get_hand().add_cards(pickup_pile.pick(5))\n      File \"a2.py\", line 215, in add_cards\n        self._cards = self._cards + list(cards)\n    TypeError: 'int' object is not iterable\n\n--------------------------------------------------------------------------------\nRan 54 tests in 0.458 seconds with 33 passed\/0 skipped\/21 failed.\n","Current Grade":"Needs Grading","Submission Field":"There is no student submission text data for this assignment.","test":{"total":54,"failed":21,"passed":33,"time":1.1899778699953458,"results":{"TestDesign":{"test_clean_import":"+","test_classes_defined":"-","test_classes_defined_correctly":"+","test_doc_strings":"+"},"TestCoderCard":{"test_repr":"+","test_get_number":"+","test_str":"+"},"TestDeck":{"test_str_with_other_cards":"-","test_get_card":"+","test_get_cards":"+","test_top":"+","test_shuffle":"+","test_copy":"-","test_deck_init":"+","test_repr":"-","test_pick":"-","test_add_cards":"+","test_get_amount":"+","test_str":"-","test_remove_card":"+","test_add_card":"+"},"TestNumberCard":{"test_repr":"+","test_get_number":"+","test_str":"+"},"TestCard":{"test_repr":"+","test_str":"+"},"TestPlayer":{"test_get_coders":"+","test_str_cards":"-","test_repr":"+","test_repr_cards":"-","test_has_won":"-","test_get_name":"+","test_str":"+","test_get_hand":"+"},"TestAllNighterCard":{"test_repr":"+","test_str":"+"},"TestPlayAndAction":{"test_number_action":"-","test_coder_play":"-","test_keyboard_action":"-","test_card_action":"-","test_number_play":"-","test_card_play":"-","test_all_nighter_play":"-","test_keyboard_play":"-","test_all_nighter_action":"-","test_coder_action":"-","test_tutor_play":"-","test_tutor_action":"-"},"TestKeyboardKidnapperCard":{"test_repr":"+","test_str":"+"},"TestTutorCard":{"test_repr":"+","test_get_number":"+","test_str":"+"},"TestNoPrint":{"runTest":"+"}},"errors":[],"skipped":0},"Comments":"There are no student comments for this assignment.","root":".","Date Submitted":"Friday, 20 September 2019 6:23:46 PM AEST","files":{"a2.py":"Assignment 2_s1234567_attempt_2019-09-20-18-23-46_a2.py"},"Name":"Brae Webb (s1234567)","sid":"s1234567","timestamp":1576221307}